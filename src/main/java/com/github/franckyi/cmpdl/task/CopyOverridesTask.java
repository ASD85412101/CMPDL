package com.github.franckyi.cmpdl.task;

import com.github.franckyi.cmpdl.CMPDL;
import com.github.franckyi.cmpdl.ManifestJson;
import javafx.application.Platform;

import java.io.*;
import java.util.Arrays;

public class CopyOverridesTask extends CustomTask<Void> {

    private final ManifestJson manifest;
    private final File dir;
    private long curSize = 0L;
    private final long maxSize;

    public CopyOverridesTask(ManifestJson manifest, File folder) {
        this.manifest = manifest;
        this.dir = new File(folder + File.separator + manifest.overrides);
        this.maxSize = dir.length();
    }

    @Override
    protected Void call0() throws Exception {
        log("> Copying overrides");
        if (dir.isDirectory()) {
            for (File file : dir.listFiles()) {
                if (!processFile(file)) return null;
            }
        }
        File cfg = new File(CMPDL.getInstanceFile());
        if (!cfg.exists())
            cfg.createNewFile();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(cfg))) {
            writer.write("InstanceType=OneSix\n"
                    + "IntendedVersion=" + manifest.minecraft.version + "\n"
                    + "LogPrePostOutput=true\n"
                    + "OverrideCommands=false\n"
                    + "OverrideConsole=false\n"
                    + "OverrideJavaArgs=false\n"
                    + "OverrideJavaLocation=false\n"
                    + "OverrideMemory=false\n"
                    + "OverrideWindow=false\n"
                    + "iconKey=default\n"
                    + "lastLaunchTime=0\n"
                    + "name=" + manifest.name + " " + manifest.version + "\n"
                    + "notes=Modpack by " + manifest.author + ". Generated by CMPDL. Using Forge " + manifest.getForgeVersion() + ".\n"
                    + "totalTimePlayed=0\n");
        }
        return null;
    }

    private boolean processFile(File file) {
        if (file.isDirectory()) {
            Arrays.asList(file.listFiles()).forEach(this::processFile);
        } else {
            File dest = new File(CMPDL.toOverridePath(file, manifest.overrides));
            new File(dest.getPath().replace(dest.getName(), "")).mkdirs();
            try {
                dest.createNewFile();
            } catch (IOException e) {
                trace(e);
                e.printStackTrace();
            }
            CopyOverrideTask task = new CopyOverrideTask(file, dest);
            Platform.runLater(() -> getController().setSecondaryProgress(task, file.getName()));
            new Thread(task).start();
            while (!task.isDone() && !task.isCancelled()) {
                if (task.isCancelled()) return false;
            }
        }
        return true;
    }

    @Override
    protected void succeeded() {
        log("> Done copying overrides");
        new Thread(new CleanTask(manifest)).start();
    }

    private class CopyOverrideTask extends CustomTask<Void> {

        private final File source;
        private final File dest;

        public CopyOverrideTask(File source, File dest) {
            this.source = source;
            this.dest = dest;
        }

        @Override
        protected Void call0() throws Exception {
            try (FileInputStream in = new FileInputStream(source)) {
                FileOutputStream out = new FileOutputStream(dest);
                long curSize2 = 0L;
                long maxSize2 = source.length();
                byte[] buffer = new byte[1024];
                int length;
                while ((length = in.read(buffer)) > 0) {
                    out.write(buffer, 0, length);
                    updateProgress(curSize2 += length, maxSize2);
                    CopyOverridesTask.this.updateProgress(curSize += curSize2, maxSize);
                }
                out.close();
            }
            log("> > Copied " + dest.getName());
            return null;
        }
    }
}